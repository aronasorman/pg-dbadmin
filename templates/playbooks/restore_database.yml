---
<[ #gcs_restore ]>
- hosts: <[ master.hostname ]>
  tasks:
    - name: create the user
      postgresql_user:
        name: <[ dbuser ]>
        role_attr_flags: SUPERUSER,CREATEROLE,CREATEDB
    - name: create the db
      postgresql_db:
        name: <[ dbname ]>
        owner: <[ dbuser ]>

    - name: create a .gcloud directory readable only by root.
      file:
        name: "{{ ansible_env.HOME }}/.gcloud"
        state: directory

    - name: copy service account credentials to master
      copy:
        src: "{{ lookup('env', 'HOME') }}/.gcloud/admin-keys.json"
        dest: "{{ ansible_env.HOME }}/.gcloud/admin-keys.json"
    
    - name: activate service account on the master
      command: "gcloud auth activate-service-account --key-file={{ ansible_env.HOME }}/.gcloud/admin-keys.json"

    - name: create directory for mountpoint
      file:
        path: "{{ ansible_env.HOME }}/.gcloud/storage"
        state: directory

    - name: mount the sqldump bucket on the local directory
      command: "gcsfuse --key-file={{ ansible_env.HOME }}/.gcloud/admin-keys.json <[ db_import_bucket ]> {{ ansible_env.HOME }}/.gcloud/storage"
    
    - name: run psql import
      command: "psql -U <[ dbuser ]> -d <[ dbname ]> -c '\\i {{ ansible_env.HOME }}/.gcloud/storage/<[ db_import_path ]>'"
    
    - name: unmount the sqldump bucket
      command: "fusermount -u {{ ansible_env.HOME }}/.gcloud/storage"
<[ /gcs_restore ]>

<[ #barman_restore ]>
- hosts: <[ master.hostname ]>
  tasks:
    - name: stop postgres server
      service:
        name: postgresql
        state: stopped

- hosts: barman
  become: true
  become_user: barman
  become_method: sudo
  tasks:
    - name: run barman recover command
    <[ #barman_target_time ]>
      command: barman recover --target-time <[ target_time ]> --remote-ssh-command='ssh postgres@<[ master.hostname ]>' <[ source_server ]> <[ backup_id ]> /var/lib/postgresql/9.6/main
    <[ /barman_target_time ]>
    <[ ^barman_target_time ]>
      command: barman recover --remote-ssh-command='ssh postgres@<[ master.hostname ]>' <[ source_server ]> <[ backup_id ]> /var/lib/postgresql/9.6/main
    <[ /barman_target_time ]>

- hosts: <[ master.hostname ]>
  tasks:
    - name: start postgres server
      service:
        name: postgresql
        state: started
    - name: reload postgres configuration
      service:
        name: postgresql
        state: reloaded
<[ /barman_restore ]>

- hosts: barman
  tasks:
    - name: create replication slot
      command: barman receive-wal --create-slot <[ master.hostname ]>
      ignore_errors: true
    - name: wait for 20s
      pause:
        seconds: 20
    - name: switch-xlog
      command: barman switch-xlog --force --archive <[ master.hostname ]>
    - name: backup master server's data
      command: barman backup <[ master.hostname ]>