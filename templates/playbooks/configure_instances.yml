---
# Base configuration. Install dependencies and configure hosts. 
- hosts: all
  tasks:
    - name: add gcsfuse to apt sources list
      apt_repository:
        repo: deb http://packages.cloud.google.com/apt gcsfuse-jessie main
        state: present
        filename: /etc/apt/sources.list.d/gcsfuse.list

    - name: import the repository signing key
      apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        state: present

    - name: add postgres repository into source list
      apt_repository:
        repo: deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main
        state: present
        filename: '/etc/apt/sources.list.d/pgdg.list'

    - name: import the repository signing key
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: present

    - name: install prerequisites
      apt:
        update_cache: yes
        name: "{{ item }}"
      with_items: 
        - dbus
        - rsync
        - gcsfuse
        - unzip
        - postgresql-9.6
        - postgresql-server-dev-9.6
        - repmgr 
        - python-pip 
        - python-dev 
        - build-essential 
        - libssl-dev 
        - libffi-dev
    
    - name: install python modules
      pip:
        name: "{{ item }}"
      with_items:
        - pexpect
        - psycopg2

    - name: add new hostname in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: '127.0.0.1 {{ hostname }} {{ hostname }}' 

    - template: 
        src: ../ip.j2
        dest: /var/lib/ip_tmp

    - name: get the content inside the ip_tmp file
      shell: "cat /var/lib/ip_tmp"
      register: ip

    - name: put the ip addresses of all machines into hosts file
      lineinfile:
        dest: /etc/hosts
        line: "{{ ip.stdout }}"

# Install and configure barman
- hosts: barman
  tasks:
    - name: install barman
      apt:
        name: barman

    - name: copy barman server configuration into /etc/barman.d
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/barman/barman.conf"
        dest: /etc/barman.conf

  <[ #version_stable ]>
    - name: Copy database server pg's configuration into /etc/barman.d
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/barman/pg.j2"
        dest: /etc/barman.d/pg.conf

    - name: Copy database server standby1's configuration into /etc/barman.d
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/barman/standby1.j2"
        dest: /etc/barman.d/standby1.conf

    - name: Copy database server standby2's configuration into /etc/barman.d
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/barman/standby2.j2"
        dest: /etc/barman.d/standby2.conf
  <[ /version_stable ]>

  <[ #version_alpha ]>
  <[ #replicas ]>
    - name: copy database server <[ hostname ]>'s configuration into /etc/barman.d
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/barman/<[ hostname ]>.conf"
        dest: /etc/barman.d/<[ hostname ]>.conf
  <[ /replicas ]>
  <[ /version_alpha ]>

    - name: generate ssh keys
      expect: 
        command: ssh-keygen -t rsa
        responses:
          'Enter file in which to save the key \(/var/lib/barman/.ssh/id_rsa\):': "\n"
          'Enter passphrase \(empty for no passphrase\):': "\n"
          'Enter same passphrase again:': "\n"
        creates: /var/lib/barman/.ssh/id_rsa
      become: true
      become_method: sudo
      become_user: barman

    - name: fetch the public key of barman to store in the local box
      fetch:
        src: /var/lib/barman/.ssh/id_rsa.pub
        dest: /tmp

    - name: create config for ssh
      file: 
        path: /var/lib/barman/.ssh/config
        state: touch
      become: true
      become_method: sudo
      become_user: barman

  <[ #version_stable ]>
    - name: create incoming wal directory for master server
      file:
        path: /var/lib/barman/{{ hostvars[groups['master'][0]]['hostname'] }}/incoming
        state: directory
        owner: barman
        group: barman
        mode: 0755

    - name: create incoming wal directory for standby1 server
      file:
        path: /var/lib/barman/{{ hostvars[groups['standby1'][0]]['hostname'] }}/incoming
        state: directory
        owner: barman
        group: barman
        mode: 0755

    - name: create incoming wal directory for standby2 server
      file:
        path: /var/lib/barman/{{ hostvars[groups['standby2'][0]]['hostname'] }}/incoming
        state: directory
        owner: barman
        group: barman
        mode: 0755
  <[ /version_stable ]>
  <[ #version_alpha ]>
  <[ #replicas ]>
    - name: create incoming wal directory for <[ hostname ]> server
      file:
        path: /var/lib/barman/<[ hostname ]>/incoming
        state: directory
        owner: barman
        group: barman
        mode: 0755
  <[ /replicas ]>
  <[ /version_alpha ]>

# Configuring all replicas - ssh-keys, and postgres configuration.
<[ #version_alpha ]>
- hosts: replicas
  tasks:
    - block: 
      - name: generate ssh keys
        expect: 
          command: ssh-keygen -t rsa
          responses:
            'Enter file in which to save the key \(/var/lib/postgresql/.ssh/id_rsa\):': "\n"
            'Enter passphrase \(empty for no passphrase\):': "\n"
            'Enter same passphrase again:': "\n"
          creates: /var/lib/postgresql/.ssh/id_rsa
      - name: create config for ssh
        file: 
          path: /var/lib/postgresql/.ssh/config
          state: touch
      - name: add barman server's ip address to config
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: "Host <[ barman.hostname ]>"
      - name: add user barman to config
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: 'User barman'
      - name: ignore ssh host key checking
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: 'StrictHostKeyChecking no'
      - name: fetch the public key to store in the local box
        fetch:
          src: /var/lib/postgresql/.ssh/id_rsa.pub
          dest: /tmp
      - name: copy barman public key into authorized_keys
        copy:
          src: /tmp/barman/var/lib/barman/.ssh/id_rsa.pub
          dest: /var/lib/postgresql/.ssh/authorized_keys
      become: true
      become_method: sudo
      become_user: postgres

    - name: add postgres as a sudoer
      lineinfile:
        dest: /etc/sudoers.d/postgres
        line: >
          postgres ALL=(root) NOPASSWD: /bin/systemctl start postgresql, 
          /bin/systemctl stop postgresql, 
          /bin/systemctl restart postgresql, 
          /bin/systemctl reload postgresql, 
          /usr/bin/pg_ctlcluster 9.6 main promote
        create: yes
        state: present
        mode: 0600

    - name: copy postgresql.conf file
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/{{ ansible_hostname }}/postgresql.conf"
        dest: /etc/postgresql/9.6/main/postgresql.conf

    - name: copy pg_hba.conf file
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/{{ ansible_hostname }}/pg_hba.conf"
        dest: /etc/postgresql/9.6/main/pg_hba.conf

    - name: copy repmgr.conf file
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/{{ ansible_hostname }}/repmgr.conf"
        dest: /etc/repmgr.conf
    
    - name: copy utility scripts expected by repmgr.conf
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/scripts/" # copy only contents inside
        dest: /usr/local/bin
        owner: postgres
        group: postgres
        mode: 0740
    
    - name: restart server
      service:
        name: postgresql
        state: restarted

    - name: reload configuration files
      service:
        name: postgresql
        state: reloaded

# Registering the master on repmgr.
- hosts: master
  tasks:
    - name: create user repmgr
      postgresql_user:
        name: repmgr
        role_attr_flags: SUPERUSER,CREATEROLE,CREATEDB

    - name: create database repmgr
      postgresql_db:
        name: repmgr
        owner: repmgr

    - name: find if host is already registered with repmgr
      command: psql -U repmgr -d repmgr -c "copy(select type from repmgr_<[ master.hostname ]>.repl_nodes where conninfo like '%{{ ansible_hostname }}%') to stdout with csv;"
      register: host_replica_type
      ignore_errors: True
      tags: debug
    
    - name: register as master
      command: repmgr -f /etc/repmgr.conf master register
      become: true
      become_user: postgres
      become_method: sudo
      when: '"master" not in host_replica_type.stdout'
<[ /version_alpha ]>
<[ #version_stable ]>
# Configuring the master - generate ssh keys, register as repmgr master.
- hosts: master
  tasks:
    - name: copy postgresql configuration file into the data folder
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/master/postgresql.j2"
        dest: /etc/postgresql/9.6/main/postgresql.conf

    - name: copy pg_hba file into the data folder
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/master/pg_hba.j2"
        dest: /etc/postgresql/9.6/main/pg_hba.conf
        
    - name: create repmgr.conf
      template:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/master/repmgr.j2"
        dest: /etc/repmgr.conf

    - block: 
      - name: generate ssh keys
        expect: 
          command: ssh-keygen -t rsa
          responses:
            'Enter file in which to save the key \(/var/lib/postgresql/.ssh/id_rsa\):': "\n"
            'Enter passphrase \(empty for no passphrase\):': "\n"
            'Enter same passphrase again:': "\n"
          creates: /var/lib/postgresql/.ssh/id_rsa
            
      - name: create config for ssh
        file: 
          path: /var/lib/postgresql/.ssh/config
          state: touch

      - name: add barman server's ip address to config
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: "Host {{ hostvars[groups['barman'][0]]['hostname'] }}"

      - name: ignore ssh host key checking
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: 'StrictHostKeyChecking no'
      become: true
      become_method: sudo
      become_user: postgres

    - name: fetch the public key to store in the local box
      fetch:
        src: /var/lib/postgresql/.ssh/id_rsa.pub
        dest: /tmp

    - name: restart server
      service:
        name: postgresql
        state: restarted

    - name: reload configuration files
      service:
        name: postgresql
        state: reloaded
    
    - name: create user repmgr
      postgresql_user:
        name: repmgr
        role_attr_flags: SUPERUSER,CREATEROLE,CREATEDB

    - name: create database repmgr
      postgresql_db:
        name: repmgr
        owner: repmgr

    - name: find if host is already registered with repmgr
      command: psql -U repmgr -d repmgr -c "copy(select type from repmgr_master.repl_nodes where conninfo like '%{{ ansible_hostname }}%') to stdout with csv;"
      register: host_replica_type
      ignore_errors: True
      tags: debug
    
    - name: register as master
      command: repmgr -f /etc/repmgr.conf master register
      become: true
      become_user: postgres
      become_method: sudo
      when: '"master" not in host_replica_type.stdout'

# Configuring standby1 - copy postgres configuration
- hosts: standby1
  tasks:
    - name: copy postgresql configuration file into the data folder
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/standby/standby_one/postgresql.j2"
        dest: /etc/postgresql/9.6/main/postgresql.conf

    - name: copy pg_hba file into the data folder
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/standby/standby_one/pg_hba.j2"
        dest: /etc/postgresql/9.6/main/pg_hba.conf

    - name: create repmgr.conf
      template:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/standby/standby_one/repmgr.j2"
        dest: /etc/repmgr.conf

# Configuring standby2 - copy postgres configuration
- hosts: standby2
  tasks:
    - name: copy postgresql configuration file into the data folder
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/standby/standby_two/postgresql.j2"
        dest: /etc/postgresql/9.6/main/postgresql.conf

    - name: copy pg_hba file into the data folder
      template: 
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/standby/standby_two/pg_hba.j2"
        dest: /etc/postgresql/9.6/main/pg_hba.conf

    - name: create repmgr.conf
      template:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/standby/standby_two/repmgr.j2"
        dest: /etc/repmgr.conf

# Configuring standbys - setup ssh-keys.
- hosts: standby
  tasks: 
    - name: add postgres as a sudoer
      lineinfile:
        dest: /etc/sudoers.d/postgres
        line: >
          postgres ALL=(root) NOPASSWD: /bin/systemctl start postgresql, 
          /bin/systemctl stop postgresql, 
          /bin/systemctl restart postgresql, 
          /bin/systemctl reload postgresql, 
          /usr/bin/pg_ctlcluster 9.6 main promote
        create: yes
        state: present
        mode: 0600

    - block: 
      - name: generate ssh keys
        expect: 
          command: ssh-keygen -t rsa
          responses:
            'Enter file in which to save the key \(/var/lib/postgresql/.ssh/id_rsa\):': "\n"
            'Enter passphrase \(empty for no passphrase\):': "\n"
            'Enter same passphrase again:': "\n"
          creates: /var/lib/postgresql/.ssh/id_rsa
            
      - name: create config for ssh
        file: 
          path: /var/lib/postgresql/.ssh/config
          state: touch

      - name: add barman server ip address to config
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: "Host {{ hostvars[groups['barman'][0]]['hostname'] }}"
      
      - name: add user barman to config
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: 'User barman'

      - name: ignore ssh host key checking
        lineinfile:
          dest: /var/lib/postgresql/.ssh/config
          line: 'StrictHostKeyChecking no'

      - name: copy barman public key into authorized_keys
        copy:
          src: /tmp/barman/var/lib/barman/.ssh/id_rsa.pub
          dest: /var/lib/postgresql/.ssh/authorized_keys
          mode: 0600
      become: true
      become_method: sudo
      become_user: postgres

    - name: fetch the public key to store in the local box
      fetch:
        src: /var/lib/postgresql/.ssh/id_rsa.pub
        dest: /tmp

<[ /version_stable ]>

# Back to barman - configure/copy barman ssh-keys, force backup master.
- hosts: barman
  become: true
  become_method: sudo
  become_user: barman
  tasks: 
  <[ #version_stable ]>
    - name: copy postgresql public key into authorized_keys
      copy:
        src: /tmp/<[ master.hostname ]>/var/lib/postgresql/.ssh/id_rsa.pub
        dest: /var/lib/barman/.ssh/authorized_keys
        mode: 0600
    - name: add standby1's public key into authorized_keys
      lineinfile:
        dest: /var/lib/barman/.ssh/authorized_keys
        line: "{{ lookup('file', '/tmp/standby1/var/lib/postgresql/.ssh/id_rsa.pub') }}"

    - name: add standby2's public key into authorized_keys
      lineinfile:
        dest: /var/lib/barman/.ssh/authorized_keys
        line: "{{ lookup('file', '/tmp/standby2/var/lib/postgresql/.ssh/id_rsa.pub') }}"
    
    - name: add standby1's ip address to config
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: "Host {{ hostvars[groups['standby1'][0]]['hostname'] }}"

    - name: add standby2's ip address to config
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: "Host {{ hostvars[groups['standby2'][0]]['hostname'] }}"
  <[ /version_stable ]>
  <[ #version_alpha ]> 
  - name: create config for ssh
    file: 
      path: /var/lib/postgresql/.ssh/authorized_keys
      state: touch
  <[ #replicas ]>
    - name: add <[ hostname ]>'s public key into authorized_keys
      lineinfile:
        dest: /var/lib/barman/.ssh/authorized_keys
        line: "{{ lookup('file', '/tmp/<[ hostname ]>/var/lib/postgresql/.ssh/id_rsa.pub') }}"

    - name: add <[ hostname ]>'s ip address to config
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: "Host <[ hostname ]>"
  <[ /replicas ]>
  <[ /version_alpha ]>

    - name: ignore ssh host key checking
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: 'StrictHostKeyChecking no'

    - name: create replication slot
      command: barman receive-wal --create-slot <[ master.hostname ]>
      ignore_errors: true

    - name: run barman cron
      command: barman cron

    - name: create a crontab to run barman cron every minute
      cron:
        name: "barman cron in every minute"
        minute: "*"
        hour: "*"
        day: "*"
        month: "*"
        weekday: "*"
        job: "/usr/bin/barman cron"

    - name: switch-xlog
      command: barman switch-xlog --force --archive <[ master.hostname ]>

    - name: backup master server's data
      command: barman backup <[ master.hostname ]>

- hosts: master
  tasks:
    - name: start repmgrd
      shell: >
        repmgrd -f /etc/repmgr.conf -d --verbose >> 
        /var/log/postgresql/postgresql-9.6-main.log 2>&1
      become: true
      become_user: postgres
      become_method: sudo

# Configure standby as standby instances on repmgr. 
- hosts: standby
  tasks:   
    - name: stop standby server
      service:
        name: postgresql
        state: stopped

    - name: remove postgresql data folder to prepare for standby clone
      command: rm -rf /var/lib/postgresql/9.6/main

    - name: clone standby
      command: >
        repmgr -h <[ master.hostname ]> -d repmgr
        -D /var/lib/postgresql/9.6/main -f /etc/repmgr.conf standby clone
      become: true
      become_user: postgres
      become_method: sudo

    - name: start server
      service:
        name: postgresql
        state: started

    - name: reload configuration files
      service:
        name: postgresql
        state: reloaded
    
    - name: find if host is already registered with repmgr
      command: psql -U repmgr -d repmgr -c "copy(select type from repmgr_<[ master.hostname ]>.repl_nodes where conninfo like '%{{ ansible_hostname }}%') to stdout with csv;"
      register: host_replica_type
      ignore_errors: true
      tags: debug
      become: true
      become_user: postgres
      become_method: sudo

    - block:
      - name: register as standby
        command: repmgr -f /etc/repmgr.conf standby register
        when:  '"standby" not in host_replica_type.stdout'

      - name: start repmgrd
        shell: >
          repmgrd -f /etc/repmgr.conf -d --verbose >> 
          /var/log/postgresql/postgresql-9.6-main.log 2>&1
      become: true
      become_user: postgres
      become_method: sudo

# Prepare barman to receive wals from standbys.
- hosts: barman
  tasks:
  <[ #version_stable ]>
    - name: check if standby1 is already registered for wal streaming
      command: barman check standby1
      register: standby1_barman_status
      ignore_errors: true
  
    - name: create replication slot for standby1
      command: barman receive-wal --create-slot {{ hostvars[groups['standby1'][0]]['hostname'] }}
      become: true
      become_method: sudo
      become_user: barman
      when: '"receive-wal running: FAILED" in standby1_barman_status.stdout'

    - name: check if standby2 is already registered for wal streaming
      command: barman check standby2
      register: standby2_barman_status
      ignore_errors: true

    - name: create replication slot for standby2
      command: barman receive-wal --create-slot {{ hostvars[groups['standby2'][0]]['hostname'] }}
      become: true
      become_method: sudo
      become_user: barman
      when: '"receive-wal running: FAILED" in standby2_barman_status.stdout'
  <[ /version_stable ]>
  <[ #version_alpha ]>
  <[ #standby ]>
    - name: create replication slot for <[ hostname ]>
      command: barman receive-wal --create-slot <[ hostname ]>
      become: true
      become_method: sudo
      become_user: barman
      ignore_errors: true
  <[ /standby ]>
  <[ /version_alpha ]>